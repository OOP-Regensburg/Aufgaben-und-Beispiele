import java.awt.event.MouseEvent;

import de.ur.mi.graphics.Color;
import de.ur.mi.graphics.Ellipse;
import de.ur.mi.graphics.Rect;
import de.ur.mi.graphicsapp.GraphicsApp;
import de.ur.mi.util.RandomGenerator;

/**
 * A simple demo application showing the use of mouse events
 * @author Alexander Bazo
 *
 */
@SuppressWarnings("serial")
public class ClickerApp extends GraphicsApp {
	
	private static final Color BACKGROUND_COLOR = Color.WHITE;
	private static final int WIDTH = 500;
	private static final int HEIGHT = 500;
	private static final int ELEMENT_SIZE = 50;
	
	private RandomGenerator random;

	public void setup() {
		setupCanvas();
		setupComponents();
	}

	private void setupCanvas() {
		size(WIDTH, HEIGHT);
		background(BACKGROUND_COLOR);
	}

	private void setupComponents() {
		random = RandomGenerator.getInstance();
	}
	
	/**
	 * This method is called to draw a new ellipse onto the canvas. Width and height are determined 
	 * by the ELEMENT_SIZE constant and the ellipses color is chosen randomly.
	 * @param x Horizontal position of the ellipse
	 * @param y Vertical position of the ellipse
	 */
	private void addEllipse(double x, double y) {
		Ellipse ellipse = new Ellipse(x, y, ELEMENT_SIZE, ELEMENT_SIZE, random.nextColor());
		ellipse.draw();
	}
	
	/**
	 * This method is called to draw a new rectangle onto the canvas. Width and height are determined 
	 * by the ELEMENT_SIZE constant and the rectangle color is chosen randomly.
	 * @param x Horizontal position of the rectangle
	 * @param y Vertical position of the rectangle
	 */
	private void addRect(double x, double y) {
		Rect rect = new Rect(x, y, ELEMENT_SIZE, ELEMENT_SIZE, random.nextColor());
		rect.draw();
	}
	

	/*
	 * This method processes the mouse events generated by the user.
	 * GraphicsApp already implements the MouseListener interfaces. Therefore our
	 * ClickerApp - extending the GraphicsApp - may override the interface methods
	 * to implement a reaction to the mouse events. The mousePressed method is called 
	 * when the any button is pressed by the user. 
	 * 
	 */
	@Override
	public void mousePressed(MouseEvent e) {
		/*
		 * The MouseEvent parameter includes several useful properties. By switching
		 * the getButton() result we determine which button was pressed. The parameter includes
		 * the cursors x and y position for the moment the event was triggered. The position is
		 * given in pixels within our applications coordinate system. We use that information to
		 * draw a circle (or rectangle) at the position the user clicked on.
		 */
		switch(e.getButton()) {
		case MouseEvent.BUTTON1:
			addEllipse(e.getX(), e.getY());
			break;
		case MouseEvent.BUTTON3:
			addRect(e.getX(), e.getY());
			break;
		}
		
		super.mousePressed(e);
	}

}
