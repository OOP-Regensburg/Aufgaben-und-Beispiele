import java.awt.event.KeyEvent;

import de.ur.mi.graphics.Color;
import de.ur.mi.graphicsapp.GraphicsApp;
/**
 * This demo shows how to use compounds by drawing
 * a multi-segmented snake onto the screen. The position of the 
 * compound snake is adjustable by using the arrow keys.
 * 
 * @author Alexander Bazo
 *
 */
@SuppressWarnings("serial")
public class SnakeApp extends GraphicsApp {

	private static final Color BACKGROUND_COLOR = Color.WHITE;
	private static final int WIDTH = 500;
	private static final int HEIGHT = 500;

	private Snake snake;

	public void setup() {
		setupCanvas();
		setupComponents();
	}

	private void setupCanvas() {
		size(WIDTH, HEIGHT);
	}

	private void setupComponents() {
		snake = new Snake(50, 50, 10);
	}

	public void draw() {
		background(BACKGROUND_COLOR);
		snake.draw();
	}

	/*
	 * This method processes the keyboard events generated by the user.
	 * GraphicsApp already implements the KeyListener interfaces. Therefore our
	 * SnakeApp - extending the GraphicsApp - may override the interface methods
	 * to implement a reaction to the keyboard events. The keyPressed method is called 
	 * when the any key is pressed by the user. The corresponding keyCode is included in the 
	 * KeyEvent parameter.
	 * 
	 */
	@Override
	public void keyPressed(KeyEvent e) {
		/*
		 * By switching the keyCode value we can detect which key was pressed. The numeric
		 * values for the different key can be looked up online 
		 * (https://docs.oracle.com/javase/7/docs/api/java/awt/event/KeyEvent.html) 
		 */
		switch (e.getKeyCode()) {
		// Right Arrow Key
		case 37:
			snake.moveBackward();
			break;
		// Left Arrow Key
		case 39:
			snake.moveForward();
			break;
		default:
			break;
		}
		super.keyPressed(e);
	}

}
